import {
  D,
  E,
  y
} from "./chunk-3ZG4N55P.js";

// node_modules/.pnpm/@astrojs+preact@3.0.0_@babel+core@7.22.15_preact@10.17.1_vite@4.4.9/node_modules/@astrojs/preact/dist/static-html.js
var StaticHtml = ({ value, name, hydrate = true }) => {
  if (!value)
    return null;
  const tagName = hydrate ? "astro-slot" : "astro-static-slot";
  return y(tagName, { name, dangerouslySetInnerHTML: { __html: value } });
};
StaticHtml.shouldComponentUpdate = () => false;
var static_html_default = StaticHtml;

// node_modules/.pnpm/@astrojs+preact@3.0.0_@babel+core@7.22.15_preact@10.17.1_vite@4.4.9/node_modules/@astrojs/preact/dist/client.js
var sharedSignalMap = /* @__PURE__ */ new Map();
var client_default = (element) => async (Component, props, { default: children, ...slotted }, { client }) => {
  if (!element.hasAttribute("ssr"))
    return;
  for (const [key, value] of Object.entries(slotted)) {
    props[key] = y(static_html_default, { value, name: key });
  }
  let signalsRaw = element.dataset.preactSignals;
  if (signalsRaw) {
    const { signal } = await import("./signals.module-AU3IOJB6.js");
    let signals = JSON.parse(element.dataset.preactSignals);
    for (const [propName, signalId] of Object.entries(signals)) {
      if (!sharedSignalMap.has(signalId)) {
        const signalValue = signal(props[propName]);
        sharedSignalMap.set(signalId, signalValue);
      }
      props[propName] = sharedSignalMap.get(signalId);
    }
  }
  const bootstrap = client !== "only" ? E : D;
  bootstrap(
    y(Component, props, children != null ? y(static_html_default, { value: children }) : children),
    element
  );
  element.addEventListener("astro:unmount", () => D(null, element), { once: true });
};

export {
  client_default
};
//# sourceMappingURL=chunk-J46RIXCM.js.map
